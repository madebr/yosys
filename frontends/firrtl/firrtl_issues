Hello,
I'm in the process of writing a firrtl lexer/parser for yosys and have a few questions about the specification.

- The firrtl uses a lot of keywords. e.g. the `exp is invalid` statement reserves `is` as a keyword. `flip` is used by bundles.
But these names can be used as an id for a signal/register/node.
This is tested by the regression tests where some modules have a `reset`/`is` port.

This makes creating a context-free grammer using bison





- Is a circuit with no module legal? It might be useful as a placeholder file.
Somethink like the following:
```
circuit MyCircuit:
    skip
```

- The module specification (section 14.2) says that a module requires at least one port. Is this correct?
No (ext)module possible with 0 ports?

- asFixed not in specification of primop (14.2)
- is the modulo/remainder function called `rem` or `mod`?
7.5 says `rem`, 14.2 says `mod`
- 14.2 primop specification misses `incp`, `decp` and `setp`.
- 14.2 register specification is wrong:
  - need no parentheses around the optional with specification.
  - reset => (exp, exp) should be surrounded with parentheses instead of curly braces
- the grammar contains the following:
```
stmt:
	...
	exp "is" "invalid" [[info]]
	...
exp:
	...
	primop '(' [[exp ...]] [[int...]] ')'

```
This makes the following *statement* valid:
```
	add(a1, a2) is invalid
```
This kind of syntax should be disallowed, imho.










Weird error:
```
circuit MyCircuit:
    module MyModule:
        input a1: UInt
        output b1: UInt
```
